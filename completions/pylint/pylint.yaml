prog: "pylint"
help: "static code analyser for Python 2 or 3"
options:
  - option_strings: ["-h", "--help"]
    help: "show this help message and exit"
    group: "group1"

  - option_strings: ["--rcfile"]
    metavar: "RCFILE"
    help: "Specify a configuration file to load."
    group: "group1"
    complete: ["file"]

  - option_strings: ["--output"]
    metavar: "OUTPUT"
    help: "Specify an output file."
    group: "group1"
    complete: ["file"]

  - option_strings: ["--help-msg"]
    metavar: "HELP_MSG"
    help: "Display a help message for the given message id and exit. The value may be a comma separated list of message ids."
    group: "group1"
    complete: ["none"]

  - option_strings: ["--list-msgs"]
    help: "Display a list of all pylint's messages divided by whether they are emittable with the given interpreter."
    group: "group1"

  - option_strings: ["--list-msgs-enabled"]
    help: "Display a list of what messages are enabled, disabled and non-emittable with the given configuration."
    group: "group1"

  - option_strings: ["--list-groups"]
    help: "List pylint's message groups."
    group: "group1"

  - option_strings: ["--list-conf-levels"]
    help: "Generate pylint's confidence levels."
    group: "group1"

  - option_strings: ["--list-extensions"]
    help: "List available extensions."
    group: "group1"

  - option_strings: ["--full-documentation"]
    help: "Generate pylint's full documentation."
    group: "group1"

  - option_strings: ["--generate-rcfile"]
    help: "Generate a sample configuration file according to the current configuration. You can put other options before this one to get them in the generated configuration."
    group: "group1"

  - option_strings: ["--generate-toml-config"]
    help: "Generate a sample configuration file according to the current configuration. You can put other options before this one to get them in the generated configuration. The config is in the .toml format."
    group: "group1"

  - option_strings: ["--long-help"]
    help: "Show more verbose help."
    group: "group1"

  - option_strings: ["--init-hook"]
    metavar: "INIT_HOOK"
    help: "Python code to execute, usually for sys.path manipulation such as pygtk.require()."
    complete: ["none"]

  - option_strings: ["--errors-only", "-E"]
    help: "In error mode, messages with a category besides ERROR or FATAL are suppressed, and no reports are done by default. Error mode is compatible with disabling specific errors."

  - option_strings: ["--verbose", "-v"]
    help: "In verbose mode, extra non-checker-related info will be displayed."

  - option_strings: ["--enable-all-extensions"]
    help: "Load and enable all available extensions. Use --list-extensions to see a list all available extensions."

  - option_strings: ["--ignore"]
    metavar: "<file>[,<file>...]"
    help: "Files or directories to be skipped. They should be base names, not paths. (default: ('CVS',))"
    complete: ["none"]

  - option_strings: ["--ignore-patterns"]
    metavar: "<pattern>[,<pattern>...]"
    help: "Files or directories matching the regular expression patterns are skipped. The regex matches against base names, not paths. The default value ignores Emacs file locks (default: (re.compile('^\\\\.#'),))"
    complete: ["none"]

  - option_strings: ["--ignore-paths"]
    metavar: "<pattern>[,<pattern>...]"
    help: "Add files or directories matching the regular expressions patterns to the ignore-list. The regex matches against paths and can be in Posix or Windows format. Because '\\\\' represents the directory delimiter on Windows systems, it can't be used as an escape character. (default: [])"
    complete: ["none"]

  - option_strings: ["--persistent"]
    metavar: "<y or n>"
    help: "Pickle collected data for later comparisons. (default: True)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--load-plugins"]
    metavar: "<modules>"
    help: "List of plugins (as comma separated values of python module names) to load, usually to register additional checkers. (default: ())"
    complete: ["none"]

  - option_strings: ["--fail-under"]
    metavar: "<score>"
    help: "Specify a score threshold under which the program will exit with error. (default: 10)"
    complete: ["none"]

  - option_strings: ["--fail-on"]
    metavar: "<msg ids>"
    help: "Return non-zero exit code if any of these messages/categories are detected, even if score is above --fail-under value. Syntax same as enable. Messages specified are enabled, while categories only check already-enabled messages. (default: )"
    complete: ["value_list", {"values": ["invalid-name", "disallowed-name", "typevar-name-incorrect-variance", "empty-docstring", "missing-module-docstring", "missing-class-docstring", "missing-function-docstring", "unnecessary-negation", "singleton-comparison", "unidiomatic-typecheck", "typevar-double-variance", "typevar-name-mismatch", "consider-using-enumerate", "consider-iterating-dictionary", "bad-classmethod-argument", "bad-mcs-method-argument", "bad-mcs-classmethod-argument", "single-string-used-for-slots", "consider-using-dict-items", "use-maxsplit-arg", "use-sequence-for-iteration", "consider-using-f-string", "line-too-long", "too-many-lines", "trailing-whitespace", "missing-final-newline", "trailing-newlines", "multiple-statements", "superfluous-parens", "mixed-line-endings", "unexpected-line-ending-format", "wrong-spelling-in-comment", "wrong-spelling-in-docstring", "invalid-characters-in-docstring", "multiple-imports", "wrong-import-order", "ungrouped-imports", "wrong-import-position", "useless-import-alias", "import-outside-toplevel", "use-implicit-booleaness-not-len", "use-implicit-booleaness-not-comparison", "use-implicit-booleaness-not-comparison-to-string", "use-implicit-booleaness-not-comparison-to-zero", "non-ascii-name", "non-ascii-module-import", "bad-file-encoding", "unnecessary-dunder-call", "unnecessary-lambda-assignment", "unnecessary-direct-lambda-call", "syntax-error", "unrecognized-inline-option", "bad-plugin-value", "bad-configuration-section", "unrecognized-option", "init-is-generator", "return-in-init", "function-redefined", "not-in-loop", "return-outside-function", "yield-outside-function", "nonexistent-operator", "duplicate-argument-name", "abstract-class-instantiated", "bad-reversed-sequence", "too-many-star-expressions", "invalid-star-assignment-target", "star-needs-assignment-target", "nonlocal-and-global", "continue-in-finally", "nonlocal-without-binding", "used-prior-global-declaration", "misplaced-format-function", "method-hidden", "access-member-before-definition", "no-method-argument", "no-self-argument", "invalid-slots-object", "assigning-non-slot", "invalid-slots", "inherit-non-class", "inconsistent-mro", "duplicate-bases", "class-variable-slots-conflict", "invalid-class-object", "invalid-enum-extension", "declare-non-slot", "non-iterator-returned", "unexpected-special-method-signature", "invalid-length-returned", "invalid-bool-returned", "invalid-index-returned", "invalid-repr-returned", "invalid-str-returned", "invalid-bytes-returned", "invalid-hash-returned", "invalid-length-hint-returned", "invalid-format-returned", "invalid-getnewargs-returned", "invalid-getnewargs-ex-returned", "import-error", "relative-beyond-top-level", "used-before-assignment", "undefined-variable", "undefined-all-variable", "invalid-all-object", "invalid-all-format", "possibly-used-before-assignment", "no-name-in-module", "unpacking-non-sequence", "potential-index-error", "bad-except-order", "raising-bad-type", "misplaced-bare-raise", "bad-exception-cause", "raising-non-exception", "notimplemented-raised", "catching-non-exception", "bad-super-call", "no-member", "not-callable", "assignment-from-no-return", "no-value-for-parameter", "too-many-function-args", "unexpected-keyword-arg", "redundant-keyword-arg", "missing-kwoa", "invalid-sequence-index", "invalid-slice-index", "assignment-from-none", "not-context-manager", "invalid-unary-operand-type", "unsupported-binary-operation", "repeated-keyword", "not-an-iterable", "not-a-mapping", "unsupported-membership-test", "unsubscriptable-object", "unsupported-assignment-operation", "unsupported-delete-operation", "invalid-metaclass", "dict-iter-missing-items", "await-outside-async", "unhashable-member", "invalid-slice-step", "logging-unsupported-format", "logging-format-truncated", "logging-too-many-args", "logging-too-few-args", "bad-format-character", "truncated-format-string", "mixed-format-string", "format-needs-mapping", "missing-format-string-key", "too-many-format-args", "too-few-format-args", "bad-string-format-type", "bad-str-strip-call", "invalid-envvar-value", "singledispatch-method", "singledispatchmethod-function", "yield-inside-async-function", "not-async-context-manager", "invalid-unicode-codec", "bidirectional-unicode", "invalid-character-backspace", "invalid-character-carriage-return", "invalid-character-sub", "invalid-character-esc", "invalid-character-nul", "invalid-character-zero-width-space", "positional-only-arguments-expected", "invalid-field-call", "modified-iterating-dict", "modified-iterating-set", "fatal", "astroid-error", "parse-error", "config-parse-error", "method-check-failed", "raw-checker-failed", "bad-inline-option", "locally-disabled", "file-ignored", "suppressed-message", "useless-suppression", "deprecated-pragma", "use-symbolic-message-instead", "c-extension-no-member", "useless-option-value", "literal-comparison", "comparison-with-itself", "comparison-of-constants", "no-classmethod-decorator", "no-staticmethod-decorator", "useless-object-inheritance", "property-with-parameters", "cyclic-import", "consider-using-from-import", "duplicate-code", "too-many-ancestors", "too-many-instance-attributes", "too-few-public-methods", "too-many-public-methods", "too-many-return-statements", "too-many-branches", "too-many-arguments", "too-many-locals", "too-many-statements", "too-many-boolean-expressions", "too-many-positional-arguments", "consider-merging-isinstance", "too-many-nested-blocks", "simplifiable-if-statement", "redefined-argument-from-local", "no-else-return", "consider-using-ternary", "trailing-comma-tuple", "stop-iteration-return", "simplify-boolean-expression", "inconsistent-return-statements", "useless-return", "consider-swap-variables", "consider-using-join", "consider-using-in", "consider-using-get", "chained-comparison", "consider-using-dict-comprehension", "consider-using-set-comprehension", "simplifiable-if-expression", "no-else-raise", "unnecessary-comprehension", "consider-using-sys-exit", "no-else-break", "no-else-continue", "super-with-arguments", "simplifiable-condition", "condition-evals-to-constant", "consider-using-generator", "use-a-generator", "consider-using-min-builtin", "consider-using-max-builtin", "consider-using-with", "unnecessary-dict-index-lookup", "use-list-literal", "use-dict-literal", "unnecessary-list-index-lookup", "use-yield-from", "unknown-option-value", "unreachable", "dangerous-default-value", "pointless-statement", "pointless-string-statement", "expression-not-assigned", "unnecessary-pass", "unnecessary-lambda", "duplicate-key", "useless-else-on-loop", "exec-used", "eval-used", "confusing-with-statement", "using-constant-test", "missing-parentheses-for-call-in-test", "self-assigning-variable", "redeclared-assigned-name", "assert-on-string-literal", "duplicate-value", "named-expr-without-context", "pointless-exception-statement", "return-in-finally", "contextmanager-generator-missing-cleanup", "comparison-with-callable", "lost-exception", "nan-comparison", "assert-on-tuple", "attribute-defined-outside-init", "bad-staticmethod-argument", "protected-access", "implicit-flag-alias", "arguments-differ", "signature-differs", "abstract-method", "super-init-not-called", "non-parent-init-called", "invalid-overridden-method", "arguments-renamed", "unused-private-member", "overridden-final-method", "subclassed-final-class", "redefined-slots-in-subclass", "super-without-brackets", "useless-parent-delegation", "unnecessary-semicolon", "bad-indentation", "wildcard-import", "reimported", "import-self", "preferred-module", "misplaced-future", "shadowed-import", "fixme", "global-variable-undefined", "global-variable-not-assigned", "global-statement", "global-at-module-level", "unused-import", "unused-variable", "unused-argument", "unused-wildcard-import", "redefined-outer-name", "redefined-builtin", "undefined-loop-variable", "unbalanced-tuple-unpacking", "cell-var-from-loop", "possibly-unused-variable", "self-cls-assignment", "unbalanced-dict-unpacking", "bare-except", "duplicate-except", "try-except-raise", "raise-missing-from", "binary-op-exception", "raising-format-tuple", "wrong-exception-operation", "broad-exception-caught", "broad-exception-raised", "keyword-arg-before-vararg", "arguments-out-of-order", "non-str-assignment-to-dunder-name", "isinstance-second-argument-not-valid-type", "kwarg-superseded-by-positional-arg", "logging-not-lazy", "logging-format-interpolation", "logging-fstring-interpolation", "bad-format-string-key", "unused-format-string-key", "bad-format-string", "missing-format-argument-key", "unused-format-string-argument", "format-combined-specification", "missing-format-attribute", "invalid-format-index", "duplicate-string-formatting-argument", "f-string-without-interpolation", "format-string-without-interpolation", "anomalous-backslash-in-string", "anomalous-unicode-escape-in-string", "implicit-str-concat", "inconsistent-quotes", "redundant-u-string-prefix", "bad-open-mode", "redundant-unittest-assert", "bad-thread-instantiation", "shallow-copy-environ", "invalid-envvar-default", "subprocess-popen-preexec-fn", "subprocess-run-check", "unspecified-encoding", "forgotten-debug-statement", "method-cache-max-size-none", "useless-with-lock", "unnecessary-ellipsis", "non-ascii-file-name", "using-f-string-in-unsupported-version", "using-final-decorator-in-unsupported-version", "using-exception-groups-in-unsupported-version", "using-generic-type-syntax-in-unsupported-version", "using-assignment-expression-in-unsupported-version", "using-positional-only-args-in-unsupported-version", "missing-timeout", "nested-min-max", "bad-chained-comparison", "modified-iterating-list", "deprecated-module", "deprecated-method", "deprecated-argument", "deprecated-class", "deprecated-decorator", "deprecated-attribute", "return-arg-in-generator", "boolean-datetime"]}]

  - option_strings: ["--jobs", "-j"]
    metavar: "<n-processes>"
    help: "Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the number of processors available to use, and will cap the count on Windows to avoid hangs. (default: 1)"
    complete: ["none"]

  - option_strings: ["--limit-inference-results"]
    metavar: "<number-of-results>"
    help: "Control the amount of potential inferred values when inferring a single object. This can help the performance when dealing with large functions or complex, nested conditions. (default: 100)"
    complete: ["none"]

  - option_strings: ["--extension-pkg-allow-list"]
    metavar: "<pkg[,pkg]>"
    help: "A comma-separated list of package or module names from where C extensions may be loaded. Extensions are loading into the active Python interpreter and may run arbitrary code. (default: [])"
    complete: ["none"]

  - option_strings: ["--extension-pkg-whitelist"]
    metavar: "<pkg[,pkg]>"
    help: "A comma-separated list of package or module names from where C extensions may be loaded. Extensions are loading into the active Python interpreter and may run arbitrary code. (This is an alternative name to extension-pkg-allow-list for backward compatibility.) (default: [])"
    complete: ["none"]

  - option_strings: ["--suggestion-mode"]
    metavar: "<y or n>"
    help: "When enabled, pylint would attempt to guess common misconfiguration and emit user-friendly hints instead of false-positive error messages. (default: True)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--exit-zero"]
    help: "Always return a 0 (non-error) status code, even if lint errors are found. This is primarily useful in continuous integration scripts. (default: False)"

  - option_strings: ["--from-stdin"]
    help: "Interpret the stdin as a python script, whose filename needs to be passed as the module_or_package argument. (default: False)"

  - option_strings: ["--source-roots"]
    metavar: "<path>[,<path>...]"
    help: "Add paths to the list of the source roots. Supports globbing patterns. The source root is an absolute path or a path relative to the current working directory used to determine a package namespace for modules located under the source root. (default: ())"
    complete: ["none"]

  - option_strings: ["--recursive"]
    metavar: "<yn>"
    help: "Discover python modules and packages in the file system subtree. (default: False)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--py-version"]
    metavar: "<py_version>"
    help: "Minimum Python version to use for version dependent checks. Will default to the version used to run pylint. (default: (3, 12))"
    complete: ["none"]

  - option_strings: ["--ignored-modules"]
    metavar: "<module names>"
    help: "List of module names for which member attributes should not be checked and will not be imported (useful for modules/projects where namespaces are manipulated during runtime and thus existing member attributes cannot be deduced by static analysis). It supports qualified module names, as well as Unix pattern matching. (default: ())"
    complete: ["none"]

  - option_strings: ["--analyse-fallback-blocks"]
    metavar: "<y or n>"
    help: "Analyse import fallback blocks. This can be used to support both Python 2 and 3 compatible code, which means that the block might have code that exists only in one or another interpreter, leading to false positives when analysed. (default: False)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--clear-cache-post-run"]
    metavar: "<y or n>"
    help: "Clear in-memory caches upon conclusion of linting. Useful if running pylint in a server-like mode. (default: False)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--prefer-stubs"]
    metavar: "<y or n>"
    help: "Resolve imports to .pyi stubs if available. May reduce no-member messages and increase not-an-iterable messages. (default: False)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--output-format", "-f"]
    metavar: "<format>"
    help: "Set the output format. Available formats are: text, parseable, colorized, json2 (improved json format), json (old json format) and msvs (visual studio). You can also give a reporter class, e.g. mypackage.mymodule.MyReporterClass."
    complete: ["none"]

  - option_strings: ["--reports", "-r"]
    metavar: "<y or n>"
    help: "Tells whether to display a full report or only the messages. (default: False)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--evaluation"]
    metavar: "<python_expression>"
    help: "Python expression which should return a score less than or equal to 10. You have access to the variables 'fatal', 'error', 'warning', 'refactor', 'convention', and 'info' which contain the number of messages in each category, as well as 'statement' which is the total number of statements analyzed. This score is used by the global evaluation report (RP0004). (default: max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)))"
    complete: ["none"]

  - option_strings: ["--score", "-s"]
    metavar: "<y or n>"
    help: "Activate the evaluation score. (default: True)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--msg-template"]
    metavar: "<template>"
    help: "Template used to display messages. This is a python new-style format string used to format the message information. See doc for all details. (default: )"
    complete: ["none"]

  - option_strings: ["--confidence"]
    metavar: "<levels>"
    help: "Only show warnings with the listed confidence levels. Leave empty to show all. Valid levels: HIGH, CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE, UNDEFINED. (default: ['HIGH', 'CONTROL_FLOW', 'INFERENCE', 'INFERENCE_FAILURE', 'UNDEFINED'])"
    complete: ["none"]

  - option_strings: ["--enable", "-e"]
    metavar: "<msg ids>"
    help: "Enable the message, report, category or checker with the given id(s). You can either give multiple identifier separated by comma (,) or put this option multiple time (only on the command line, not in the configuration file where it should appear only once). See also the \"--disable\" option for examples."
    complete: ["value_list", {"values": ["invalid-name", "disallowed-name", "typevar-name-incorrect-variance", "empty-docstring", "missing-module-docstring", "missing-class-docstring", "missing-function-docstring", "unnecessary-negation", "singleton-comparison", "unidiomatic-typecheck", "typevar-double-variance", "typevar-name-mismatch", "consider-using-enumerate", "consider-iterating-dictionary", "bad-classmethod-argument", "bad-mcs-method-argument", "bad-mcs-classmethod-argument", "single-string-used-for-slots", "consider-using-dict-items", "use-maxsplit-arg", "use-sequence-for-iteration", "consider-using-f-string", "line-too-long", "too-many-lines", "trailing-whitespace", "missing-final-newline", "trailing-newlines", "multiple-statements", "superfluous-parens", "mixed-line-endings", "unexpected-line-ending-format", "wrong-spelling-in-comment", "wrong-spelling-in-docstring", "invalid-characters-in-docstring", "multiple-imports", "wrong-import-order", "ungrouped-imports", "wrong-import-position", "useless-import-alias", "import-outside-toplevel", "use-implicit-booleaness-not-len", "use-implicit-booleaness-not-comparison", "use-implicit-booleaness-not-comparison-to-string", "use-implicit-booleaness-not-comparison-to-zero", "non-ascii-name", "non-ascii-module-import", "bad-file-encoding", "unnecessary-dunder-call", "unnecessary-lambda-assignment", "unnecessary-direct-lambda-call", "syntax-error", "unrecognized-inline-option", "bad-plugin-value", "bad-configuration-section", "unrecognized-option", "init-is-generator", "return-in-init", "function-redefined", "not-in-loop", "return-outside-function", "yield-outside-function", "nonexistent-operator", "duplicate-argument-name", "abstract-class-instantiated", "bad-reversed-sequence", "too-many-star-expressions", "invalid-star-assignment-target", "star-needs-assignment-target", "nonlocal-and-global", "continue-in-finally", "nonlocal-without-binding", "used-prior-global-declaration", "misplaced-format-function", "method-hidden", "access-member-before-definition", "no-method-argument", "no-self-argument", "invalid-slots-object", "assigning-non-slot", "invalid-slots", "inherit-non-class", "inconsistent-mro", "duplicate-bases", "class-variable-slots-conflict", "invalid-class-object", "invalid-enum-extension", "declare-non-slot", "non-iterator-returned", "unexpected-special-method-signature", "invalid-length-returned", "invalid-bool-returned", "invalid-index-returned", "invalid-repr-returned", "invalid-str-returned", "invalid-bytes-returned", "invalid-hash-returned", "invalid-length-hint-returned", "invalid-format-returned", "invalid-getnewargs-returned", "invalid-getnewargs-ex-returned", "import-error", "relative-beyond-top-level", "used-before-assignment", "undefined-variable", "undefined-all-variable", "invalid-all-object", "invalid-all-format", "possibly-used-before-assignment", "no-name-in-module", "unpacking-non-sequence", "potential-index-error", "bad-except-order", "raising-bad-type", "misplaced-bare-raise", "bad-exception-cause", "raising-non-exception", "notimplemented-raised", "catching-non-exception", "bad-super-call", "no-member", "not-callable", "assignment-from-no-return", "no-value-for-parameter", "too-many-function-args", "unexpected-keyword-arg", "redundant-keyword-arg", "missing-kwoa", "invalid-sequence-index", "invalid-slice-index", "assignment-from-none", "not-context-manager", "invalid-unary-operand-type", "unsupported-binary-operation", "repeated-keyword", "not-an-iterable", "not-a-mapping", "unsupported-membership-test", "unsubscriptable-object", "unsupported-assignment-operation", "unsupported-delete-operation", "invalid-metaclass", "dict-iter-missing-items", "await-outside-async", "unhashable-member", "invalid-slice-step", "logging-unsupported-format", "logging-format-truncated", "logging-too-many-args", "logging-too-few-args", "bad-format-character", "truncated-format-string", "mixed-format-string", "format-needs-mapping", "missing-format-string-key", "too-many-format-args", "too-few-format-args", "bad-string-format-type", "bad-str-strip-call", "invalid-envvar-value", "singledispatch-method", "singledispatchmethod-function", "yield-inside-async-function", "not-async-context-manager", "invalid-unicode-codec", "bidirectional-unicode", "invalid-character-backspace", "invalid-character-carriage-return", "invalid-character-sub", "invalid-character-esc", "invalid-character-nul", "invalid-character-zero-width-space", "positional-only-arguments-expected", "invalid-field-call", "modified-iterating-dict", "modified-iterating-set", "fatal", "astroid-error", "parse-error", "config-parse-error", "method-check-failed", "raw-checker-failed", "bad-inline-option", "locally-disabled", "file-ignored", "suppressed-message", "useless-suppression", "deprecated-pragma", "use-symbolic-message-instead", "c-extension-no-member", "useless-option-value", "literal-comparison", "comparison-with-itself", "comparison-of-constants", "no-classmethod-decorator", "no-staticmethod-decorator", "useless-object-inheritance", "property-with-parameters", "cyclic-import", "consider-using-from-import", "duplicate-code", "too-many-ancestors", "too-many-instance-attributes", "too-few-public-methods", "too-many-public-methods", "too-many-return-statements", "too-many-branches", "too-many-arguments", "too-many-locals", "too-many-statements", "too-many-boolean-expressions", "too-many-positional-arguments", "consider-merging-isinstance", "too-many-nested-blocks", "simplifiable-if-statement", "redefined-argument-from-local", "no-else-return", "consider-using-ternary", "trailing-comma-tuple", "stop-iteration-return", "simplify-boolean-expression", "inconsistent-return-statements", "useless-return", "consider-swap-variables", "consider-using-join", "consider-using-in", "consider-using-get", "chained-comparison", "consider-using-dict-comprehension", "consider-using-set-comprehension", "simplifiable-if-expression", "no-else-raise", "unnecessary-comprehension", "consider-using-sys-exit", "no-else-break", "no-else-continue", "super-with-arguments", "simplifiable-condition", "condition-evals-to-constant", "consider-using-generator", "use-a-generator", "consider-using-min-builtin", "consider-using-max-builtin", "consider-using-with", "unnecessary-dict-index-lookup", "use-list-literal", "use-dict-literal", "unnecessary-list-index-lookup", "use-yield-from", "unknown-option-value", "unreachable", "dangerous-default-value", "pointless-statement", "pointless-string-statement", "expression-not-assigned", "unnecessary-pass", "unnecessary-lambda", "duplicate-key", "useless-else-on-loop", "exec-used", "eval-used", "confusing-with-statement", "using-constant-test", "missing-parentheses-for-call-in-test", "self-assigning-variable", "redeclared-assigned-name", "assert-on-string-literal", "duplicate-value", "named-expr-without-context", "pointless-exception-statement", "return-in-finally", "contextmanager-generator-missing-cleanup", "comparison-with-callable", "lost-exception", "nan-comparison", "assert-on-tuple", "attribute-defined-outside-init", "bad-staticmethod-argument", "protected-access", "implicit-flag-alias", "arguments-differ", "signature-differs", "abstract-method", "super-init-not-called", "non-parent-init-called", "invalid-overridden-method", "arguments-renamed", "unused-private-member", "overridden-final-method", "subclassed-final-class", "redefined-slots-in-subclass", "super-without-brackets", "useless-parent-delegation", "unnecessary-semicolon", "bad-indentation", "wildcard-import", "reimported", "import-self", "preferred-module", "misplaced-future", "shadowed-import", "fixme", "global-variable-undefined", "global-variable-not-assigned", "global-statement", "global-at-module-level", "unused-import", "unused-variable", "unused-argument", "unused-wildcard-import", "redefined-outer-name", "redefined-builtin", "undefined-loop-variable", "unbalanced-tuple-unpacking", "cell-var-from-loop", "possibly-unused-variable", "self-cls-assignment", "unbalanced-dict-unpacking", "bare-except", "duplicate-except", "try-except-raise", "raise-missing-from", "binary-op-exception", "raising-format-tuple", "wrong-exception-operation", "broad-exception-caught", "broad-exception-raised", "keyword-arg-before-vararg", "arguments-out-of-order", "non-str-assignment-to-dunder-name", "isinstance-second-argument-not-valid-type", "kwarg-superseded-by-positional-arg", "logging-not-lazy", "logging-format-interpolation", "logging-fstring-interpolation", "bad-format-string-key", "unused-format-string-key", "bad-format-string", "missing-format-argument-key", "unused-format-string-argument", "format-combined-specification", "missing-format-attribute", "invalid-format-index", "duplicate-string-formatting-argument", "f-string-without-interpolation", "format-string-without-interpolation", "anomalous-backslash-in-string", "anomalous-unicode-escape-in-string", "implicit-str-concat", "inconsistent-quotes", "redundant-u-string-prefix", "bad-open-mode", "redundant-unittest-assert", "bad-thread-instantiation", "shallow-copy-environ", "invalid-envvar-default", "subprocess-popen-preexec-fn", "subprocess-run-check", "unspecified-encoding", "forgotten-debug-statement", "method-cache-max-size-none", "useless-with-lock", "unnecessary-ellipsis", "non-ascii-file-name", "using-f-string-in-unsupported-version", "using-final-decorator-in-unsupported-version", "using-exception-groups-in-unsupported-version", "using-generic-type-syntax-in-unsupported-version", "using-assignment-expression-in-unsupported-version", "using-positional-only-args-in-unsupported-version", "missing-timeout", "nested-min-max", "bad-chained-comparison", "modified-iterating-list", "deprecated-module", "deprecated-method", "deprecated-argument", "deprecated-class", "deprecated-decorator", "deprecated-attribute", "return-arg-in-generator", "boolean-datetime"]}]

  - option_strings: ["--disable", "-d"]
    metavar: "<msg ids>"
    help: "Disable the message, report, category or checker with the given id(s). You can either give multiple identifiers separated by comma (,) or put this option multiple times (only on the command line, not in the configuration file where it should appear only once). You can also use \"--disable=all\" to disable everything first and then re-enable specific checks. For example, if you want to run only the similarities checker, you can use \"--disable=all --enable=similarities\". If you want to run only the classes checker, but have no Warning level messages displayed, use \"--disable=all --enable=classes --disable=W\"."
    complete: ["value_list", {"values": ["invalid-name", "disallowed-name", "typevar-name-incorrect-variance", "empty-docstring", "missing-module-docstring", "missing-class-docstring", "missing-function-docstring", "unnecessary-negation", "singleton-comparison", "unidiomatic-typecheck", "typevar-double-variance", "typevar-name-mismatch", "consider-using-enumerate", "consider-iterating-dictionary", "bad-classmethod-argument", "bad-mcs-method-argument", "bad-mcs-classmethod-argument", "single-string-used-for-slots", "consider-using-dict-items", "use-maxsplit-arg", "use-sequence-for-iteration", "consider-using-f-string", "line-too-long", "too-many-lines", "trailing-whitespace", "missing-final-newline", "trailing-newlines", "multiple-statements", "superfluous-parens", "mixed-line-endings", "unexpected-line-ending-format", "wrong-spelling-in-comment", "wrong-spelling-in-docstring", "invalid-characters-in-docstring", "multiple-imports", "wrong-import-order", "ungrouped-imports", "wrong-import-position", "useless-import-alias", "import-outside-toplevel", "use-implicit-booleaness-not-len", "use-implicit-booleaness-not-comparison", "use-implicit-booleaness-not-comparison-to-string", "use-implicit-booleaness-not-comparison-to-zero", "non-ascii-name", "non-ascii-module-import", "bad-file-encoding", "unnecessary-dunder-call", "unnecessary-lambda-assignment", "unnecessary-direct-lambda-call", "syntax-error", "unrecognized-inline-option", "bad-plugin-value", "bad-configuration-section", "unrecognized-option", "init-is-generator", "return-in-init", "function-redefined", "not-in-loop", "return-outside-function", "yield-outside-function", "nonexistent-operator", "duplicate-argument-name", "abstract-class-instantiated", "bad-reversed-sequence", "too-many-star-expressions", "invalid-star-assignment-target", "star-needs-assignment-target", "nonlocal-and-global", "continue-in-finally", "nonlocal-without-binding", "used-prior-global-declaration", "misplaced-format-function", "method-hidden", "access-member-before-definition", "no-method-argument", "no-self-argument", "invalid-slots-object", "assigning-non-slot", "invalid-slots", "inherit-non-class", "inconsistent-mro", "duplicate-bases", "class-variable-slots-conflict", "invalid-class-object", "invalid-enum-extension", "declare-non-slot", "non-iterator-returned", "unexpected-special-method-signature", "invalid-length-returned", "invalid-bool-returned", "invalid-index-returned", "invalid-repr-returned", "invalid-str-returned", "invalid-bytes-returned", "invalid-hash-returned", "invalid-length-hint-returned", "invalid-format-returned", "invalid-getnewargs-returned", "invalid-getnewargs-ex-returned", "import-error", "relative-beyond-top-level", "used-before-assignment", "undefined-variable", "undefined-all-variable", "invalid-all-object", "invalid-all-format", "possibly-used-before-assignment", "no-name-in-module", "unpacking-non-sequence", "potential-index-error", "bad-except-order", "raising-bad-type", "misplaced-bare-raise", "bad-exception-cause", "raising-non-exception", "notimplemented-raised", "catching-non-exception", "bad-super-call", "no-member", "not-callable", "assignment-from-no-return", "no-value-for-parameter", "too-many-function-args", "unexpected-keyword-arg", "redundant-keyword-arg", "missing-kwoa", "invalid-sequence-index", "invalid-slice-index", "assignment-from-none", "not-context-manager", "invalid-unary-operand-type", "unsupported-binary-operation", "repeated-keyword", "not-an-iterable", "not-a-mapping", "unsupported-membership-test", "unsubscriptable-object", "unsupported-assignment-operation", "unsupported-delete-operation", "invalid-metaclass", "dict-iter-missing-items", "await-outside-async", "unhashable-member", "invalid-slice-step", "logging-unsupported-format", "logging-format-truncated", "logging-too-many-args", "logging-too-few-args", "bad-format-character", "truncated-format-string", "mixed-format-string", "format-needs-mapping", "missing-format-string-key", "too-many-format-args", "too-few-format-args", "bad-string-format-type", "bad-str-strip-call", "invalid-envvar-value", "singledispatch-method", "singledispatchmethod-function", "yield-inside-async-function", "not-async-context-manager", "invalid-unicode-codec", "bidirectional-unicode", "invalid-character-backspace", "invalid-character-carriage-return", "invalid-character-sub", "invalid-character-esc", "invalid-character-nul", "invalid-character-zero-width-space", "positional-only-arguments-expected", "invalid-field-call", "modified-iterating-dict", "modified-iterating-set", "fatal", "astroid-error", "parse-error", "config-parse-error", "method-check-failed", "raw-checker-failed", "bad-inline-option", "locally-disabled", "file-ignored", "suppressed-message", "useless-suppression", "deprecated-pragma", "use-symbolic-message-instead", "c-extension-no-member", "useless-option-value", "literal-comparison", "comparison-with-itself", "comparison-of-constants", "no-classmethod-decorator", "no-staticmethod-decorator", "useless-object-inheritance", "property-with-parameters", "cyclic-import", "consider-using-from-import", "duplicate-code", "too-many-ancestors", "too-many-instance-attributes", "too-few-public-methods", "too-many-public-methods", "too-many-return-statements", "too-many-branches", "too-many-arguments", "too-many-locals", "too-many-statements", "too-many-boolean-expressions", "too-many-positional-arguments", "consider-merging-isinstance", "too-many-nested-blocks", "simplifiable-if-statement", "redefined-argument-from-local", "no-else-return", "consider-using-ternary", "trailing-comma-tuple", "stop-iteration-return", "simplify-boolean-expression", "inconsistent-return-statements", "useless-return", "consider-swap-variables", "consider-using-join", "consider-using-in", "consider-using-get", "chained-comparison", "consider-using-dict-comprehension", "consider-using-set-comprehension", "simplifiable-if-expression", "no-else-raise", "unnecessary-comprehension", "consider-using-sys-exit", "no-else-break", "no-else-continue", "super-with-arguments", "simplifiable-condition", "condition-evals-to-constant", "consider-using-generator", "use-a-generator", "consider-using-min-builtin", "consider-using-max-builtin", "consider-using-with", "unnecessary-dict-index-lookup", "use-list-literal", "use-dict-literal", "unnecessary-list-index-lookup", "use-yield-from", "unknown-option-value", "unreachable", "dangerous-default-value", "pointless-statement", "pointless-string-statement", "expression-not-assigned", "unnecessary-pass", "unnecessary-lambda", "duplicate-key", "useless-else-on-loop", "exec-used", "eval-used", "confusing-with-statement", "using-constant-test", "missing-parentheses-for-call-in-test", "self-assigning-variable", "redeclared-assigned-name", "assert-on-string-literal", "duplicate-value", "named-expr-without-context", "pointless-exception-statement", "return-in-finally", "contextmanager-generator-missing-cleanup", "comparison-with-callable", "lost-exception", "nan-comparison", "assert-on-tuple", "attribute-defined-outside-init", "bad-staticmethod-argument", "protected-access", "implicit-flag-alias", "arguments-differ", "signature-differs", "abstract-method", "super-init-not-called", "non-parent-init-called", "invalid-overridden-method", "arguments-renamed", "unused-private-member", "overridden-final-method", "subclassed-final-class", "redefined-slots-in-subclass", "super-without-brackets", "useless-parent-delegation", "unnecessary-semicolon", "bad-indentation", "wildcard-import", "reimported", "import-self", "preferred-module", "misplaced-future", "shadowed-import", "fixme", "global-variable-undefined", "global-variable-not-assigned", "global-statement", "global-at-module-level", "unused-import", "unused-variable", "unused-argument", "unused-wildcard-import", "redefined-outer-name", "redefined-builtin", "undefined-loop-variable", "unbalanced-tuple-unpacking", "cell-var-from-loop", "possibly-unused-variable", "self-cls-assignment", "unbalanced-dict-unpacking", "bare-except", "duplicate-except", "try-except-raise", "raise-missing-from", "binary-op-exception", "raising-format-tuple", "wrong-exception-operation", "broad-exception-caught", "broad-exception-raised", "keyword-arg-before-vararg", "arguments-out-of-order", "non-str-assignment-to-dunder-name", "isinstance-second-argument-not-valid-type", "kwarg-superseded-by-positional-arg", "logging-not-lazy", "logging-format-interpolation", "logging-fstring-interpolation", "bad-format-string-key", "unused-format-string-key", "bad-format-string", "missing-format-argument-key", "unused-format-string-argument", "format-combined-specification", "missing-format-attribute", "invalid-format-index", "duplicate-string-formatting-argument", "f-string-without-interpolation", "format-string-without-interpolation", "anomalous-backslash-in-string", "anomalous-unicode-escape-in-string", "implicit-str-concat", "inconsistent-quotes", "redundant-u-string-prefix", "bad-open-mode", "redundant-unittest-assert", "bad-thread-instantiation", "shallow-copy-environ", "invalid-envvar-default", "subprocess-popen-preexec-fn", "subprocess-run-check", "unspecified-encoding", "forgotten-debug-statement", "method-cache-max-size-none", "useless-with-lock", "unnecessary-ellipsis", "non-ascii-file-name", "using-f-string-in-unsupported-version", "using-final-decorator-in-unsupported-version", "using-exception-groups-in-unsupported-version", "using-generic-type-syntax-in-unsupported-version", "using-assignment-expression-in-unsupported-version", "using-positional-only-args-in-unsupported-version", "missing-timeout", "nested-min-max", "bad-chained-comparison", "modified-iterating-list", "deprecated-module", "deprecated-method", "deprecated-argument", "deprecated-class", "deprecated-decorator", "deprecated-attribute", "return-arg-in-generator", "boolean-datetime"]}]

  - option_strings: ["--min-similarity-lines"]
    metavar: "<int>"
    help: "Minimum lines number of a similarity. (default: 4)"
    complete: ["none"]

  - option_strings: ["--ignore-comments"]
    metavar: "<y or n>"
    help: "Comments are removed from the similarity computation (default: True)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--ignore-docstrings"]
    metavar: "<y or n>"
    help: "Docstrings are removed from the similarity computation (default: True)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--ignore-imports"]
    metavar: "<y or n>"
    help: "Imports are removed from the similarity computation (default: True)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--ignore-signatures"]
    metavar: "<y or n>"
    help: "Signatures are removed from the similarity computation (default: True)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--ignore-on-opaque-inference"]
    metavar: "<y or n>"
    help: "This flag controls whether pylint should warn about no-member and similar checks whenever an opaque object is returned when inferring. The inference can return multiple potential results while evaluating a Python object, but some branches might not be evaluated, which results in partial inference. In that case, it might be useful to still emit no-member and other checks for the rest of the inferred objects. (default: True)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--mixin-class-rgx"]
    metavar: "<regexp>"
    help: "Regex pattern to define which classes are considered mixins. (default: .*[Mm]ixin)"
    complete: ["none"]

  - option_strings: ["--ignore-mixin-members"]
    metavar: "<y or n>"
    help: "Tells whether missing members accessed in mixin class should be ignored. A class is considered mixin if its name matches the mixin-class-rgx option. (default: True)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--ignored-checks-for-mixins"]
    metavar: "<list of messages names>"
    help: "List of symbolic message names to ignore for Mixin members. (default: ['no-member', 'not-async-context-manager', 'not-context-manager', 'attribute-defined-outside-init'])"
    complete: ["none"]

  - option_strings: ["--ignore-none"]
    metavar: "<y or n>"
    help: "Tells whether to warn about missing members when the owner of the attribute is inferred to be None. (default: True)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--ignored-classes"]
    metavar: "<members names>"
    help: "List of class names for which member attributes should not be checked (useful for classes with dynamically set attributes). This supports the use of qualified names. (default: ('optparse.Values', 'thread._local', '_thread._local', 'argparse.Namespace'))"
    complete: ["none"]

  - option_strings: ["--generated-members"]
    metavar: "<members names>"
    help: "List of members which are set dynamically and missed by pylint inference system, and so shouldn't trigger E1101 when accessed. Python regular expressions are accepted. (default: ())"
    complete: ["none"]

  - option_strings: ["--contextmanager-decorators"]
    metavar: "<decorator names>"
    help: "List of decorators that produce context managers, such as contextlib.contextmanager. Add to this list to register other decorators that produce valid context managers. (default: ['contextlib.contextmanager'])"
    complete: ["none"]

  - option_strings: ["--missing-member-hint-distance"]
    metavar: "<member hint edit distance>"
    help: "The minimum edit distance a name should have in order to be considered a similar match for a missing member name. (default: 1)"
    complete: ["none"]

  - option_strings: ["--missing-member-max-choices"]
    metavar: "<member hint max choices>"
    help: "The total number of similar names that should be taken in consideration when showing a hint for a missing member. (default: 1)"
    complete: ["none"]

  - option_strings: ["--missing-member-hint"]
    metavar: "<missing member hint>"
    help: "Show a hint with possible names when a member name was not found. The aspect of finding the hint is based on edit distance. (default: True)"
    complete: ["none"]

  - option_strings: ["--signature-mutators"]
    metavar: "<decorator names>"
    help: "List of decorators that change the signature of a decorated function. (default: [])"
    complete: ["none"]

  - option_strings: ["--notes"]
    metavar: "<comma separated values>"
    help: "List of note tags to take in consideration, separated by a comma. (default: ('FIXME', 'XXX', 'TODO'))"
    complete: ["none"]

  - option_strings: ["--notes-rgx"]
    metavar: "<regexp>"
    help: "Regular expression of note tags to take in consideration. (default: )"
    complete: ["none"]

  - option_strings: ["--timeout-methods"]
    metavar: "<comma separated list>"
    help: "List of qualified names (i.e., library.method) which require a timeout parameter e.g. 'requests.api.get,requests.api.post' (default: ('requests.api.delete', 'requests.api.get', 'requests.api.head', 'requests.api.options', 'requests.api.patch', 'requests.api.post', 'requests.api.put', 'requests.api.request'))"
    complete: ["none"]

  - option_strings: ["--spelling-dict"]
    metavar: "<dict name>"
    help: "Spelling dictionary name. No available dictionaries : You need to install both the python package and the system dependency for enchant to work. (default: )"
    complete: ["none"]

  - option_strings: ["--spelling-ignore-words"]
    metavar: "<comma separated words>"
    help: "List of comma separated words that should not be checked. (default: )"
    complete: ["none"]

  - option_strings: ["--spelling-private-dict-file"]
    metavar: "<path to file>"
    help: "A path to a file that contains the private dictionary; one word per line. (default: )"
    complete: ["file"]

  - option_strings: ["--spelling-store-unknown-words"]
    metavar: "<y or n>"
    help: "Tells whether to store unknown words to the private dictionary (see the --spelling-private-dict-file option) instead of raising a message. (default: n)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--max-spelling-suggestions"]
    metavar: "N"
    help: "Limits count of emitted suggestions for spelling mistakes. (default: 4)"
    complete: ["none"]

  - option_strings: ["--spelling-ignore-comment-directives"]
    metavar: "<comma separated words>"
    help: "List of comma separated words that should be considered directives if they appear at the beginning of a comment and should not be checked. (default: fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:)"
    complete: ["none"]

  - option_strings: ["--max-nested-blocks"]
    metavar: "<int>"
    help: "Maximum number of nested blocks for function / method body (default: 5)"
    complete: ["none"]

  - option_strings: ["--never-returning-functions"]
    metavar: "<members names>"
    help: "Complete name of functions that never returns. When checking for inconsistent-return-statements if a never returning function is called then it will be considered as an explicit return statement and no message will be printed. (default: ('sys.exit', 'argparse.parse_error'))"
    complete: ["none"]

  - option_strings: ["--suggest-join-with-non-empty-separator"]
    metavar: "<y or n>"
    help: "Let 'consider-using-join' be raised when the separator to join on would be non-empty (resulting in expected fixes of the type: ``\"- \" + \" - \".join(items)``) (default: True)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--check-str-concat-over-line-jumps"]
    metavar: "<y or n>"
    help: "This flag controls whether the implicit-str-concat should generate a warning on implicit string concatenation in sequences defined over several lines. (default: False)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--check-quote-consistency"]
    metavar: "<y or n>"
    help: "This flag controls whether inconsistent-quotes generates a warning when the character used as a quote delimiter is used inconsistently within a module. (default: False)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--max-args"]
    metavar: "<int>"
    help: "Maximum number of arguments for function / method. (default: 5)"
    complete: ["none"]

  - option_strings: ["--max-positional-arguments"]
    metavar: "<int>"
    help: "Maximum number of positional arguments for function / method. (default: 5)"
    complete: ["none"]

  - option_strings: ["--max-locals"]
    metavar: "<int>"
    help: "Maximum number of locals for function / method body. (default: 15)"
    complete: ["none"]

  - option_strings: ["--max-returns"]
    metavar: "<int>"
    help: "Maximum number of return / yield for function / method body. (default: 6)"
    complete: ["none"]

  - option_strings: ["--max-branches"]
    metavar: "<int>"
    help: "Maximum number of branch for function / method body. (default: 12)"
    complete: ["none"]

  - option_strings: ["--max-statements"]
    metavar: "<int>"
    help: "Maximum number of statements in function / method body. (default: 50)"
    complete: ["none"]

  - option_strings: ["--max-parents"]
    metavar: "<num>"
    help: "Maximum number of parents for a class (see R0901). (default: 7)"
    complete: ["none"]

  - option_strings: ["--ignored-parents"]
    metavar: "<comma separated list of class names>"
    help: "List of qualified class names to ignore when counting class parents (see R0901) (default: ())"
    complete: ["none"]

  - option_strings: ["--max-attributes"]
    metavar: "<num>"
    help: "Maximum number of attributes for a class (see R0902). (default: 7)"
    complete: ["none"]

  - option_strings: ["--min-public-methods"]
    metavar: "<num>"
    help: "Minimum number of public methods for a class (see R0903). (default: 2)"
    complete: ["none"]

  - option_strings: ["--max-public-methods"]
    metavar: "<num>"
    help: "Maximum number of public methods for a class (see R0904). (default: 20)"
    complete: ["none"]

  - option_strings: ["--max-bool-expr"]
    metavar: "<num>"
    help: "Maximum number of boolean expressions in an if statement (see R0916). (default: 5)"
    complete: ["none"]

  - option_strings: ["--exclude-too-few-public-methods"]
    metavar: "<pattern>[,<pattern>...]"
    help: "List of regular expressions of class ancestor names to ignore when counting public methods (see R0903) (default: [])"
    complete: ["none"]

  - option_strings: ["--overgeneral-exceptions"]
    metavar: "<comma-separated class names>"
    help: "Exceptions that will emit a warning when caught. (default: ('builtins.BaseException', 'builtins.Exception'))"
    complete: ["none"]

  - option_strings: ["--defining-attr-methods"]
    metavar: "<method names>"
    help: "List of method names used to declare (i.e. assign) instance attributes. (default: ('__init__', '__new__', 'setUp', 'asyncSetUp', '__post_init__'))"
    complete: ["none"]

  - option_strings: ["--valid-classmethod-first-arg"]
    metavar: "<argument names>"
    help: "List of valid names for the first argument in a class method. (default: ('cls',))"
    complete: ["none"]

  - option_strings: ["--valid-metaclass-classmethod-first-arg"]
    metavar: "<argument names>"
    help: "List of valid names for the first argument in a metaclass class method. (default: ('mcs',))"
    complete: ["none"]

  - option_strings: ["--exclude-protected"]
    metavar: "<protected access exclusions>"
    help: "List of member names, which should be excluded from the protected access warning. (default: ('_asdict', '_fields', '_replace', '_source', '_make', 'os._exit'))"
    complete: ["none"]

  - option_strings: ["--check-protected-access-in-special-methods"]
    metavar: "<y or n>"
    help: "Warn about protected attribute access inside special methods (default: False)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--max-line-length"]
    metavar: "<int>"
    help: "Maximum number of characters on a single line. (default: 100)"
    complete: ["none"]

  - option_strings: ["--ignore-long-lines"]
    metavar: "<regexp>"
    help: "Regexp for a line that is allowed to be longer than the limit. (default: ^\\s*(# )?<?https?://\\S+>?$)"
    complete: ["none"]

  - option_strings: ["--single-line-if-stmt"]
    metavar: "<y or n>"
    help: "Allow the body of an if to be on the same line as the test if there is no else. (default: False)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--single-line-class-stmt"]
    metavar: "<y or n>"
    help: "Allow the body of a class to be on the same line as the declaration if body contains single statement. (default: False)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--max-module-lines"]
    metavar: "<int>"
    help: "Maximum number of lines in a module. (default: 1000)"
    complete: ["none"]

  - option_strings: ["--indent-string"]
    metavar: "<string>"
    help: "String used as indentation unit. This is usually \" \" (4 spaces) or \"\\t\" (1 tab). (default: )"
    complete: ["none"]

  - option_strings: ["--indent-after-paren"]
    metavar: "<int>"
    help: "Number of spaces of indent required inside a hanging or continued line. (default: 4)"
    complete: ["none"]

  - option_strings: ["--expected-line-ending-format"]
    metavar: "<empty or LF or CRLF>"
    help: "Expected format of line ending, e.g. empty (any line ending), LF or CRLF. (default: )"
    complete: ["none"]

  - option_strings: ["--good-names"]
    metavar: "<names>"
    help: "Good variable names which should always be accepted, separated by a comma. (default: ('i', 'j', 'k', 'ex', 'Run', '_'))"
    complete: ["none"]

  - option_strings: ["--good-names-rgxs"]
    metavar: "<names>"
    help: "Good variable names regexes, separated by a comma. If names match any regex, they will always be accepted (default: )"
    complete: ["none"]

  - option_strings: ["--bad-names"]
    metavar: "<names>"
    help: "Bad variable names which should always be refused, separated by a comma. (default: ('foo', 'bar', 'baz', 'toto', 'tutu', 'tata'))"
    complete: ["none"]

  - option_strings: ["--bad-names-rgxs"]
    metavar: "<names>"
    help: "Bad variable names regexes, separated by a comma. If names match any regex, they will always be refused (default: )"
    complete: ["none"]

  - option_strings: ["--name-group"]
    metavar: "<name1:name2>"
    help: "Colon-delimited sets of names that determine each other's naming style when the name regexes allow several styles. (default: ())"
    complete: ["none"]

  - option_strings: ["--include-naming-hint"]
    metavar: "<y or n>"
    help: "Include a hint for the correct naming format with invalid-name. (default: False)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--property-classes"]
    metavar: "<decorator names>"
    help: "List of decorators that produce properties, such as abc.abstractproperty. Add to this list to register other decorators that produce valid properties. These decorators are taken in consideration only for invalid-name. (default: ('abc.abstractproperty',))"
    complete: ["none"]

  - option_strings: ["--argument-naming-style"]
    metavar: "<style>"
    help: "Naming style matching correct argument names. (default: snake_case)"
    complete: ["choices", ["snake_case", "camelCase", "PascalCase", "UPPER_CASE", "any"]]

  - option_strings: ["--argument-rgx"]
    metavar: "<regexp>"
    help: "Regular expression matching correct argument names. Overrides argument-naming-style. If left empty, argument names will be checked with the set naming style. (default: None)"
    complete: ["none"]

  - option_strings: ["--attr-naming-style"]
    metavar: "<style>"
    help: "Naming style matching correct attribute names. (default: snake_case)"
    complete: ["choices", ["snake_case", "camelCase", "PascalCase", "UPPER_CASE", "any"]]

  - option_strings: ["--attr-rgx"]
    metavar: "<regexp>"
    help: "Regular expression matching correct attribute names. Overrides attr-naming-style. If left empty, attribute names will be checked with the set naming style. (default: None)"
    complete: ["none"]

  - option_strings: ["--class-naming-style"]
    metavar: "<style>"
    help: "Naming style matching correct class names. (default: PascalCase)"
    complete: ["choices", ["snake_case", "camelCase", "PascalCase", "UPPER_CASE", "any"]]

  - option_strings: ["--class-rgx"]
    metavar: "<regexp>"
    help: "Regular expression matching correct class names. Overrides class-naming-style. If left empty, class names will be checked with the set naming style. (default: None)"
    complete: ["none"]

  - option_strings: ["--class-attribute-naming-style"]
    metavar: "<style>"
    help: "Naming style matching correct class attribute names. (default: any)"
    complete: ["choices", ["snake_case", "camelCase", "PascalCase", "UPPER_CASE", "any"]]

  - option_strings: ["--class-attribute-rgx"]
    metavar: "<regexp>"
    help: "Regular expression matching correct class attribute names. Overrides class-attribute-naming-style. If left empty, class attribute names will be checked with the set naming style. (default: None)"
    complete: ["none"]

  - option_strings: ["--class-const-naming-style"]
    metavar: "<style>"
    help: "Naming style matching correct class constant names. (default: UPPER_CASE)"
    complete: ["choices", ["snake_case", "camelCase", "PascalCase", "UPPER_CASE", "any"]]

  - option_strings: ["--class-const-rgx"]
    metavar: "<regexp>"
    help: "Regular expression matching correct class constant names. Overrides class-const-naming-style. If left empty, class constant names will be checked with the set naming style. (default: None)"
    complete: ["none"]

  - option_strings: ["--const-naming-style"]
    metavar: "<style>"
    help: "Naming style matching correct constant names. (default: UPPER_CASE)"
    complete: ["choices", ["snake_case", "camelCase", "PascalCase", "UPPER_CASE", "any"]]

  - option_strings: ["--const-rgx"]
    metavar: "<regexp>"
    help: "Regular expression matching correct constant names. Overrides const-naming-style. If left empty, constant names will be checked with the set naming style. (default: None)"
    complete: ["none"]

  - option_strings: ["--function-naming-style"]
    metavar: "<style>"
    help: "Naming style matching correct function names. (default: snake_case)"
    complete: ["choices", ["snake_case", "camelCase", "PascalCase", "UPPER_CASE", "any"]]

  - option_strings: ["--function-rgx"]
    metavar: "<regexp>"
    help: "Regular expression matching correct function names. Overrides function-naming-style. If left empty, function names will be checked with the set naming style. (default: None)"
    complete: ["none"]

  - option_strings: ["--inlinevar-naming-style"]
    metavar: "<style>"
    help: "Naming style matching correct inline iteration names. (default: any)"
    complete: ["choices", ["snake_case", "camelCase", "PascalCase", "UPPER_CASE", "any"]]

  - option_strings: ["--inlinevar-rgx"]
    metavar: "<regexp>"
    help: "Regular expression matching correct inline iteration names. Overrides inlinevar-naming-style. If left empty, inline iteration names will be checked with the set naming style. (default: None)"
    complete: ["none"]

  - option_strings: ["--method-naming-style"]
    metavar: "<style>"
    help: "Naming style matching correct method names. (default: snake_case)"
    complete: ["choices", ["snake_case", "camelCase", "PascalCase", "UPPER_CASE", "any"]]

  - option_strings: ["--method-rgx"]
    metavar: "<regexp>"
    help: "Regular expression matching correct method names. Overrides method-naming-style. If left empty, method names will be checked with the set naming style. (default: None)"
    complete: ["none"]

  - option_strings: ["--module-naming-style"]
    metavar: "<style>"
    help: "Naming style matching correct module names. (default: snake_case)"
    complete: ["choices", ["snake_case", "camelCase", "PascalCase", "UPPER_CASE", "any"]]

  - option_strings: ["--module-rgx"]
    metavar: "<regexp>"
    help: "Regular expression matching correct module names. Overrides module-naming-style. If left empty, module names will be checked with the set naming style. (default: None)"
    complete: ["none"]

  - option_strings: ["--typealias-rgx"]
    metavar: "<regexp>"
    help: "Regular expression matching correct type alias names. If left empty, type alias names will be checked with the set naming style. (default: None)"
    complete: ["none"]

  - option_strings: ["--typevar-rgx"]
    metavar: "<regexp>"
    help: "Regular expression matching correct type variable names. If left empty, type variable names will be checked with the set naming style. (default: None)"
    complete: ["none"]

  - option_strings: ["--variable-naming-style"]
    metavar: "<style>"
    help: "Naming style matching correct variable names. (default: snake_case)"
    complete: ["choices", ["snake_case", "camelCase", "PascalCase", "UPPER_CASE", "any"]]

  - option_strings: ["--variable-rgx"]
    metavar: "<regexp>"
    help: "Regular expression matching correct variable names. Overrides variable-naming-style. If left empty, variable names will be checked with the set naming style. (default: None)"
    complete: ["none"]

  - option_strings: ["--no-docstring-rgx"]
    metavar: "<regexp>"
    help: "Regular expression which should only match function or class names that do not require a docstring. (default: re.compile('^_'))"
    complete: ["none"]

  - option_strings: ["--docstring-min-length"]
    metavar: "<int>"
    help: "Minimum line length for functions/classes that require docstrings, shorter ones are exempt. (default: -1)"
    complete: ["none"]

  - option_strings: ["--init-import"]
    metavar: "<y or n>"
    help: "Tells whether we should check for unused import in __init__ files. (default: False)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--dummy-variables-rgx"]
    metavar: "<regexp>"
    help: "A regular expression matching the name of dummy variables (i.e. expected to not be used). (default: _+ $|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_)"
    complete: ["none"]

  - option_strings: ["--additional-builtins"]
    metavar: "<comma separated list>"
    help: "List of additional names supposed to be defined in builtins. Remember that you should avoid defining new builtins when possible. (default: ())"
    complete: ["none"]

  - option_strings: ["--callbacks"]
    metavar: "<callbacks>"
    help: "List of strings which can identify a callback function by name. A callback name must start or end with one of those strings. (default: ('cb_', '_cb'))"
    complete: ["none"]

  - option_strings: ["--redefining-builtins-modules"]
    metavar: "<comma separated list>"
    help: "List of qualified module names which can have objects that can redefine builtins. (default: ('six.moves', 'past.builtins', 'future.builtins', 'builtins', 'io'))"
    complete: ["none"]

  - option_strings: ["--ignored-argument-names"]
    metavar: "<regexp>"
    help: "Argument names that match this expression will be ignored. (default: re.compile('_.*|^ignored_|^unused_'))"
    complete: ["none"]

  - option_strings: ["--allow-global-unused-variables"]
    metavar: "<y or n>"
    help: "Tells whether unused global variables should be treated as a violation. (default: True)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--allowed-redefined-builtins"]
    metavar: "<comma separated list>"
    help: "List of names allowed to shadow builtins (default: ())"
    complete: ["none"]

  - option_strings: ["--deprecated-modules"]
    metavar: "<modules>"
    help: "Deprecated modules which should not be used, separated by a comma. (default: ())"
    complete: ["none"]

  - option_strings: ["--preferred-modules"]
    metavar: "<module:preferred-module>"
    help: "Couples of modules and preferred modules, separated by a comma. (default: ())"
    complete: ["none"]

  - option_strings: ["--import-graph"]
    metavar: "<file.gv>"
    help: "Output a graph (.gv or any supported image format) of all (i.e. internal and external) dependencies to the given file (report RP0402 must not be disabled). (default: )"
    complete: ["file"]

  - option_strings: ["--ext-import-graph"]
    metavar: "<file.gv>"
    help: "Output a graph (.gv or any supported image format) of external dependencies to the given file (report RP0402 must not be disabled). (default: )"
    complete: ["file"]

  - option_strings: ["--int-import-graph"]
    metavar: "<file.gv>"
    help: "Output a graph (.gv or any supported image format) of internal dependencies to the given file (report RP0402 must not be disabled). (default: )"
    complete: ["file"]

  - option_strings: ["--known-standard-library"]
    metavar: "<modules>"
    help: "Force import order to recognize a module as part of the standard compatibility libraries. (default: ())"
    complete: ["none"]

  - option_strings: ["--known-third-party"]
    metavar: "<modules>"
    help: "Force import order to recognize a module as part of a third party library. (default: ('enchant',))"
    complete: ["none"]

  - option_strings: ["--allow-any-import-level"]
    metavar: "<modules>"
    help: "List of modules that can be imported at any level, not just the top level one. (default: ())"
    complete: ["none"]

  - option_strings: ["--allow-wildcard-with-all"]
    metavar: "<y or n>"
    help: "Allow wildcard imports from modules that define __all__. (default: False)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--allow-reexport-from-package"]
    metavar: "<y or n>"
    help: "Allow explicit reexports by alias from a package __init__. (default: False)"
    complete: ["choices", ["y", "n"]]

  - option_strings: ["--logging-modules"]
    metavar: "<comma separated list>"
    help: "Logging modules to check that the string format arguments are in logging function parameter format. (default: ('logging',))"
    complete: ["none"]

  - option_strings: ["--logging-format-style"]
    metavar: "<old (%) or new ({)>"
    help: "The type of string formatting that logging methods do. `old` means using % formatting, `new` is for `{}` formatting. (default: old)"
    complete: ["choices", ["new", "old"]]

positionals:
  - number: 1
    metavar: "FILE"
    repeatable: true
    complete: ["file"]
